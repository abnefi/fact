<?php

namespace OperationsClientBundle\Repository;

use OperationsClientBundle\Entity\ClientDevis;
use OperationsClientBundle\Entity\ClientFactureDetail;
use OperationsClientBundle\Entity\ClientFactureVente;
use UserBundle\Entity\FosUser;

/**
 * ClientDevisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientDevisRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param ClientDevis $clientDevis
     * @param FosUser     $user
     * @param             $codeGenerator
     *
     * @return ClientFactureVente
     */
    public function buildeFactureVente(ClientDevis $clientDevis, FosUser $user, $codeGenerator) {
        $clientFactureVente = new ClientFactureVente();
        if ($clientDevis->getReferenceFactureVenteGenere()) {
            $clientFactureVente = $this->_em->getRepository(ClientFactureVente::class)
                ->findOneBy(['reference' => $clientDevis->getReferenceFactureVenteGenere()]);
            return $clientFactureVente;
        }
        $societe = $user->getAgence()->getSociete();

        $configTypeFacture = $this->_em->getRepository('ConfigBundle:ConfigTypeFacture')->findOneBy(['code' => 'FV','estSupprimer'=>0]);
        $clientFactureVente->setTypeFacture($configTypeFacture);

        //Création de la référence
        $reference = $codeGenerator->genererReferenceFacture($clientFactureVente->getTypeFacture(),$societe->getId());
        $clientFactureVente->setReference($reference);

        if ($societe->getAssujetiTva() === true) {
            $tauxTVA = $this->_em->getRepository('ConfigBundle:ConfigTaux')->findOneBy(['code' => 'tva','estSupprimer'=>0]);
            $clientFactureVente->setTauxTVA($tauxTVA->getValeurTaux());
        }
        $clientFactureVente->setSociete($societe);
        $clientFactureVente->setAgence($user->getAgence());
        $clientFactureVente->setDevise($clientDevis->getDevise());
        $clientFactureVente->setTauxTVA($clientDevis->getTauxTVA());
        $clientFactureVente->setTauxChange($clientDevis->getTauxChange());
        $clientFactureVente->setClient($clientDevis->getClient());
        $clientFactureVente->setApplicationAIB($clientDevis->getApplicationAIB());
        $clientFactureVente->setDateFacture($clientDevis->getDateFacture());
        $clientFactureVente->setDateReglement($clientDevis->getDateFacture());
        $clientFactureVente->setNotes($clientDevis->getNotes());
        $clientFactureVente->setTotalAIB($clientDevis->getTotalAIB());
        $clientFactureVente->setTotalHT($clientDevis->getTotalHT());
        $clientFactureVente->setTotalTTC($clientDevis->getTotalTTC());
        $clientFactureVente->setTotalTVA($clientDevis->getTotalTVA());
        $clientFactureVente->setEstCreeParDevis(true);
        $clientFactureVente->setCreatedBy($user->getSlug());
        $clientFactureVente->setEstSupprimer(0);
        $clientDevis->setReferenceFactureVenteGenere($clientFactureVente->getReference());
        $this->_em->persist($clientFactureVente);

        $detailsDevis = $clientDevis->getDetails();

        /** @var ClientFactureDetail $detailDevis */
        foreach ($detailsDevis as $detailDevis) {
            $detail = clone $detailDevis;
            $detail->setCreatedBy($user->getSlug());
            $detail->setFacture($clientFactureVente);
            $this->_em->persist($detail);
            $clientFactureVente->addDetail($detail);
        }
        $this->_em->flush();
        return $clientFactureVente;
    }
}
