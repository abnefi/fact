<?php

namespace OperationsClientBundle\Repository;

use ConfigBundle\Entity\ConfigAgence;
use ConfigBundle\Entity\ConfigSociete;
use OperationsClientBundle\Entity\ClientDevis;
use OperationsClientBundle\Entity\ClientFacture;
use OperationsClientBundle\Entity\ClientFactureDetail;

/**
 * ClientFactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientFactureRepository extends \Doctrine\ORM\EntityRepository
{

    public function getEditInfo(ClientFacture $facture) {
        $devis = null;
        if ($facture->getId()) {
            $devis = $this->_em->getRepository(ClientDevis::class)->find($facture->getId());
        }
        return [
            'client' => $facture->getClient()->getNom(),
            'data_facture' => $facture->getDateFacture(),
            'data_reglement' => $devis ? $devis->getDateReglement() : new \DateTime(),
            'devise' => $facture->getDevise()->getId(),
            'tva' => $facture->getTauxTVA(),
            'totalHT' => $facture->getTotalHT(),
            'totalAIB' => $facture->getTotalAIB(),
            'totalTTC' => $facture->getTotalTTC(),
            'totalTVA' => $facture->getTotalTVA(),
            'details' => (static function() use ($facture) {
                $data = [];
                /** @var ClientFactureDetail $detail */
                foreach ($facture->getDetails() as $detail) {
                    $data[] = [
                        'produit' => $detail->getProduit()->getId(),
                        'uniteMesure' => $detail->getUniteMesure()->getId(),
                        'quantite' => $detail->getQuantite(),
                        'prixVenteUnitaire' => $detail->getPrixVenteUnitaire(),
                        'tauxRemise' => $detail->getTauxRemise(),
                        'aibDeductible' => $detail->getAibDeductible(),
                        'tauxAIB' => $detail->getTauxAIB(),
                        'description' => $detail->getDescription(),
                        'hasTaxeSpecifique' => $detail->getHasTaxeSpecifique(),
                        'taxeSpecifique' => $detail->getTaxeSpecifique(),
                        'descriptionTaxeSpecifique' => $detail->getDescriptionTaxeSpecifique(),
                        'changementPrixUnitaireTTC' => $detail->getChangementPrixUnitaireTTC(),
                        'dernierPrixOrigine' => $detail->getDernierPrixOrigine(),
                        'descriptionPrixOrigine' => $detail->getDescriptionPrixOrigine(),
                        'taxeDeSejour' => $detail->getTaxeDeSejour()
                    ];
                }
                return $data;
            })(),
        ];
    }

    public function taille($societe)
    {
        $tab = $this->_em->createQuery(
            "select count(a)
            from StockBundle:StockArticle a
            inner join ConfigBundle:ConfigSociete s with s = a.societe
            where s = :soc"
        )
            ->setParameter('soc', $societe)
            ->getResult();
        return $tab[0][1];
    }

    /**
     * @param $codesFactures
     * @param $agence
     *
     * @return ClientFacture[]
     */
    public function getFacturesAvoirEtVente($codesFactures, ConfigAgence $agence)
    {
        return $this
            ->createQueryBuilder('f')
            ->leftJoin('f.typeFacture', 'tf')
            ->where('f.agence = :agence')
            ->andWhere('tf.code IN (:codesFactures)')
            ->setParameter('codesFactures', $codesFactures)
            ->setParameter('agence', $agence)
            ->setMaxResults(20)
            ->orderBy('f.dateFacture', 'desc')
            ->getQuery()
            ->getResult()
        ;
    }


    public function getByFiltres($tempsFactureActif, $tempsFacturation, $arrayTypesFacture, $arrayClients, $etatfactures, $configSociete)
    {
        $params = [
            'societe' => $configSociete
        ];
        $wherePeriod = $whereClient = $whereEtat = $leftJoinClient = $leftJoinEtat = '';
        $leftJoinTypeFacture = 'left join ConfigBundle:ConfigTypeFacture tf with f.typeFacture = tf';

        if ($tempsFactureActif === 'true') {
            $parts = explode(' au ', $tempsFacturation);
            $wherePeriod = 'and f.dateFacture >= :dateDebut and f.dateFacture <= :dateFin';
            $params['dateDebut'] = new \DateTime($parts[0]);
            $params['dateFin'] = new \DateTime($parts[1]);
        }

        if ($arrayTypesFacture !== '') {
            $params['typeFacture'] = $arrayTypesFacture;
            $whereTypeFacture = 'and tf in (:typeFacture)';
        } else {
            $whereTypeFacture = 'and tf.code in (:typeFacture)';
            $params['typeFacture'] = ['FV', 'FA'];
        }

        if ($arrayClients !== '') {
            $leftJoinClient = 'left join TiersBundle:TiersClient cl with f.client = cl';
            $whereClient = 'and cl in (:clients)';
            $params['clients'] = $arrayClients;
        }

        if ($etatfactures !== '') {
            $leftJoinEtat = 'left join ConfigBundle:ConfigEtat et with f.etatDeclaration = et';
            $whereEtat = 'and et in (:etatFacture)';
            $params['etatFacture'] = $etatfactures;
        }

        $dql = "
            select f
            from OperationsClientBundle:ClientFacture f
            {$leftJoinTypeFacture}
            {$leftJoinClient}
            {$leftJoinEtat}
            where f.societe = :societe
            {$wherePeriod}
            {$whereTypeFacture}
            {$whereClient}
            {$whereEtat}
            order by f.dateFacture desc
        ";
        dump($dql, $params); //die();
        $result = $this->_em->createQuery($dql)
            ->setMaxResults(20)
            ->setParameters($params)
            ->getResult()
        ;
        dump($result); //die();

        return $result;
        /*
        $req = $this->_em->createQuery()->setParameters($params)
            ->getResult();

        $qb = $this
            ->createQueryBuilder('f')
            ->leftJoin('f.typeFacture', 'tf')
            ->andWhere("tf.code IN ('FV', 'EV', 'FA', 'EA')");

        if ($tempsFactureActif == 'true') {
            if ($typeTemps == 'date') {
                $qb->where("f.dateFacture = :dateFacturation")
                    ->setParameter('dateFacturation', $tempsFacturation);
            } elseif ($typeTemps == 'periode') {
                $tablePeriodeFinContrat = explode(' au ', $tempsFacturation);
                if (count($tablePeriodeFinContrat) == 2) {
                    $debut = new \DateTime(trim($tablePeriodeFinContrat[0], " \t\n\r\0\x0B\xC2\xA0"));
                    $fin = new \DateTime(trim($tablePeriodeFinContrat[1], " \t\n\r\0\x0B\xC2\xA0"));
                    $qb->andWhere('f.dateFacture >= :debut and f.dateFacture <= :fin')
                        ->setParameter('debut', $debut)
                        ->setParameter('fin', $fin);
                }
            }
        }

        if (!empty($arrayTypesFacture)) {
            $qb->andWhere('tf.id IN (:typesFactures)')
                ->setParameter('typesFactures', $arrayTypesFacture);
        }

        if (!empty($arrayClients)) {
            $qb->andWhere('f.client IN (:clients)')
                ->setParameter('clients', $arrayClients);
        }

        if (!empty($etatfactures)) {
            $qb->andWhere('f.etatDeclaration = (:etatFacture)')
                ->setParameter('etatFacture', $etatfactures);
        }

        $qb->andWhere('f.societe = (:soc)')
            ->setParameter('soc', $configSociete);

        $qb->orderBy('f.dateFacture', 'desc');

        result $qb
            ->getQuery()
            ->getResult();*/
    }


}
